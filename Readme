# MVC PHP Framework for SarveCrm 

A lightweight and flexible MVC (Model-View-Controller) PHP framework for building web applications.

## Features

- **MVC Architecture**: Organize codebase using the Model-View-Controller pattern.
- **Routing System**: Handle HTTP requests and define routes for your application.
- **Controllers**: Create controllers to manage application logic.
- **Models**: Interact with the database using models.
- **Views**: Render templates for templating.
- **Configuration**: Easily configure your application using environment variables.
- **API and Web Routes**: Define both API and web routes for your project.

## Getting Started

1. Clone the repository to your local machine.
2. Install dependencies using Composer.
3. Configure your web server to point to the public directory.
4. Create a `.env` file for environment configuration.
5. Start building your web application!

## Routes

- **API Routes**: Defined in `api.php` for API endpoints.
- **Web Routes**: Defined in `web.php` for web routes.
## Routes

### API Routes (Defined in `api.php`)

- **POST /api/products**: Create a new product (Endpoint: `/api/products`, Controller: `ProductsController@store`).
- **POST /api/products/update**: Update a product (Endpoint: `/api/products/update`, Controller: `ProductsController@update`).
- **DELETE /api/products/{id}**: Delete a product by ID (Endpoint: `/api/products/{id}`, Controller: `ProductsController@delete`).
- **GET /api/shoppingcart**: Display the shopping cart (Endpoint: `/api/shoppingcart`, Controller: `ShoppingCartController@index`).
- **POST /api/cart/add/{id}**: Add a product to the cart (Endpoint: `/api/cart/add/{id}`, Controller: `ShoppingCartController@addToCart`).
- **DELETE /api/cart/remove/{id}**: Remove a product from the cart (Endpoint: `/api/cart/remove/{id}`, Controller: `ShoppingCartController@removeFromCart`).
- **POST /api/cart/checkout**: Checkout the cart (Endpoint: `/api/cart/checkout`, Controller: `ShoppingCartController@checkout`).

### Web Routes (Defined in `web.php`)

- **GET /**: Display the homepage (Endpoint: `/`, Controller: `ProductsController@index`).
- **GET /products/{id}**: Display product details by ID (Endpoint: `/products/{id}`, Controller: `ProductsController@show`).
- **GET /products/create/new**: Display the product creation form (Endpoint: `/products/create/new`, Controller: `ProductsController@create`).
- **GET /products**: Display a list of products (Endpoint: `/products`, Controller: `ProductsController@index`).
- **GET /products/update/{id}**: Display the product update form (Endpoint: `/products/update/{id}`, Controller: `ProductsController@edit`).


For detailed route information, see the [Routes](#routes) section in this README.

## Usage

1. Define your routes in the appropriate route file (`api.php` or `web.php`).
2. Create controllers to manage your application's logic.
3. Implement models to interact with the database.
4. Use views to render templates.

## Contribution

Contributions are welcome! If you'd like to contribute, please follow the guidelines in the [Contributing](#contributing) section.

## License

This project is open-source and available under the MIT License. See the [LICENSE](LICENSE) file for details.
